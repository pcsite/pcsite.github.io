<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on PengSite</title>
    <link>/tags/java/</link>
    <description>Recent content in java on PengSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 28 Sep 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Stream流详解与应用</title>
      <link>/2017/stream/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/stream/</guid>
      <description>Stream流详解与应用 1. 什么是 Stream？ ​	Stream（流）是一个来自数据源的元素队列并支持聚合操作 ​	元素是特定类型的对象，形成一个队列。Java中的Stream并不会存储元素，而是按需计算。 ​	流的来源：可以是集合，数组，I/O channel， 产生器generator 等。 ​	聚合操作：类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。
2. Stream基础特征 ​	Pipelining: 中间操作都会返回流对象本身。这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。 ​	内部迭代： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做	外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。
3. Stream流的三类方法 1. 获取Steam流 : 可以理解成创建一条流水线，并把数据放到流水线上准备进行操作 2. 中间方法 : 可以理解成流水线上的操作，一次操作完毕之后，还可以继续进行其他操作 3. 是流水线上的最后一个操作，一个Stream流只能有一个终结方法  4. Stream流的获取方法   单列集合
可以使用Collection接口中的默认方法stream(),生成流
default Stream&amp;lt;E&amp;gt; stream()   双列集合
间接的生成流 可以先通过keySet或者entrySet获取一个Set集合，再获取Stream流
  数组
Arrays中的静态方法stream生成流</description>
    </item>
    
  </channel>
</rss>
