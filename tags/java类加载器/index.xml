<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java类加载器 on PengSite</title>
    <link>/tags/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
    <description>Recent content in java类加载器 on PengSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>java类加载器</title>
      <link>/2017/jiazaiqi/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/jiazaiqi/</guid>
      <description>类加载器   什么是类加载器
 类加载器：负责将.class文件(存储的物理文件)加载到内存中    类加载的过程
 类加载时机 &amp;mdash; 用到就加载，不用不加载  创建类的实例（对象） 调用类的类方法（静态方法） 访问类或者接口的类变量，或者为该类变量赋值 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象 初始化某个类的子类 直接使用java.exe命令来运行某个主类   加载  通过一个类的全限定名来获取定义此类的二进制字节流 &amp;mdash; 通过包名+类名，获取这个类，准备用流进行传输 将这个字节流所代表的静态存储结构转化为运行时数据结构 &amp;mdash; 在这个类加载到内存中 在内存中生成一个代表这个类的java.lang.Class对象，任何类被使用时，系统都会为之建立一个java.lang.Class对象 &amp;mdash; 加载完毕创建一个class对象   验证  验证文件中的信息是否符合虚拟机规范，有没有安全隐患   准备  负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值。 &amp;mdash; 初始化静态变量   解析  本类中如果用到了其他类，此时就需要找到对应的类   初始化  静态变量赋值以及初始化其它资源      类加载器的分类
 启动类加载器（Bootstrap Classloader）:虚拟机内置的类加载器 平台类加载器（Platform Classloader）:负责加载JDK中一些特殊的模块 系统类加载器（System Classloader）：负责加载用户类路径上所指定的类库    类加载器双亲委派模型</description>
    </item>
    
  </channel>
</rss>
