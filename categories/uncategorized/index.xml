<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on PengSite</title>
    <link>/categories/uncategorized/</link>
    <description>Recent content in Uncategorized on PengSite</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 12 Nov 2017 00:00:00 +0000</lastBuildDate><atom:link href="/categories/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux网络与磁盘管理</title>
      <link>/2017/linux4/</link>
      <pubDate>Sun, 12 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/linux4/</guid>
      <description>Linux网络与磁盘管理   ifconfig命令
 语法：ifconfig [参数选项]：显示或配置网络设备的命令 ifconfig：显示激活的网卡信息 ifconfig 网卡名称 down：关闭网卡 ifconfig 网卡名称 up：启动网卡 ifconfig 网卡名称 ip：配置ip地址 ifconfig 网卡名称 ip 子网掩码：配置ip地址和子网掩码    ping命令
 语法：ifconfig [参数选项]：检查是否与主机连通 参数选项  -c &amp;lt;完成次数&amp;gt;：设置完成要求回应的次数      netstat命令
 语法：netstat [参数选项]：显示网络状态 参数选项  -a：显示所有连线中的Socket -i：显示网卡列表      lsblk命令
 语法：lsblk [参数选项]：列出硬盘的使用情况 参数选项  -f：显示系统信息      df命令
 语法：df [参数选项]：显示目前在Linux系统上，硬盘的使用情况 参数选项  --total：显示所有的信息 -h：换算成KB,MB,GB等形式进行展示      mount命令</description>
    </item>
    
    <item>
      <title>Linux下解压缩</title>
      <link>/2017/linux3/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/linux3/</guid>
      <description>Linux下解压缩   gzip命令
 语法：gzip [参数选项] [文件]：压缩文件 gzip a.txt：压缩文件 gzip *：压缩当前目录下所有文件 gzip -dv *：解压文件并列出详细信息    gunzip命令
 语法：gunzip [参数][文件]：解压文件    tar命令
 语法：tar [必要参数][选择参数][文件]：打包、压缩和解压（文件/文件夹） tar本身不具有压缩功能。他是调用压缩功能实现的 参数选项  -c：建立新的压缩文件 -v：显示指令执行过程 -f：&amp;lt;备份文件&amp;gt;指定压缩文件 -z：通过gzip指令处理压缩文件 -t：列出压缩文件中的内容 -x：表示解压   tar -cvf 打包文件名 文件名：打包文件并指定打包之后的文件名（仅打包不压缩） tar -zcvf 压缩文件名 文件名/文件夹名：压缩文件或者文件夹并指定压缩文件名（打包压缩） tar -ztvf 压缩文件名：查看压缩文件中有哪些文件 tar -zxvf 压缩文件名：解压    zip命令
 语法：zip [必要参数][选择参数][文件]：压缩 zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有.zip扩展名的压缩文件 参数选项  -q：不显示指令执行过程 -r：递归处理，将指定目录下的所有文件和子目录一并处理      unzip命令</description>
    </item>
    
    <item>
      <title>Linux的文件管理</title>
      <link>/2017/linux2/</link>
      <pubDate>Mon, 06 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/linux2/</guid>
      <description>Linux文件管理   touch命令
  touch命令用于创建文件、修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。
  语法：touch [参数选项] 文件名：如果文件不存在就创建文件，如果存在就修改时间属性
 a 改变档案的读取时间记录。 m 改变档案的修改时间记录。 c 假如目的档案不存在，不会建立新的档案。与 &amp;ndash;no-create 的效果一样。 f 不使用，是为了与其他 unix 系统的相容性而保留。 r 使用参考档的时间记录，与 &amp;ndash;file 的效果一样。 d 设定时间与日期，可以使用各种不同的格式。 t 设定档案的时间记录，格式与 date 指令相同。 &amp;ndash;no-create 不会建立新档案。 &amp;ndash;help 列出指令格式。 &amp;ndash;version 列出版本讯息。    使用 touch 创建一个空文件
  在 Linux 系统上使用 touch 命令创建空文件，键入 touch，然后输入文件名。如下所示
touch a.txt 查看
ls -l a.txt     使用 touch 创建批量空文件
在实际的开发过程中可能会出现一些情况，我们必须为某些测试创建大量空文件，这可以使用 touch 命令轻松实现</description>
    </item>
    
    <item>
      <title>Linux的目录管理</title>
      <link>/2017/linux1/</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/linux1/</guid>
      <description>Linux的目录管理   目录常用命令
   常见命令 作用     ls 列出目录   cd 切换目录   pwd 显示当前的目录   mkdir 创建新目录   rmdir 删除空目录   cp 复制文件或目录   rm 删除文件或目录   mv 移动文件或目录修改文件或者目录的名字      ls：ls相当于在windows系统中打开文件夹，看到的目录以及文件的明细
  语法
  ls [参数选项] 目录名称：列出目录里的内容
  参数选项
  -a：显示所有文件或目录（包含隐藏）
  -d：仅列出目录本身，而不是列出目录内的文件数据（常用）
  -l：长数据串列出，包含文件的属性与权限等等数据（常用）
  -al：显示所有文件与文件夹的详细信息</description>
    </item>
    
    <item>
      <title>Linux系统与设置命令</title>
      <link>/2017/linuxxit/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/linuxxit/</guid>
      <description>Linux系统与设置命令   Centos文件和目录
 etc：系统中的配置文件 usr/bin：系统预设执行文件的放置目录 usr/sbin：系统预设执行文件的复制目录 usr：系统预设执行文件的放置目录 var：/var/log程序运行日志的存放目录    系统与设置命令
  切换root账号：su root
  账号管理
 创建用户：useradd(选项)用户名 用户口令：passwd(选项)用户名 修改用户：usermod 选项 用户名 删除用户：userdel(选项)用户名    用户组
 创建用户组：groupadd (选项) 用户组名 修改用户组：groupmod (选项) 用户组名 查询用户所属组：groups 用户组名 删除用户组：groupdel 用户组名    管理用户组内成员
 语法：gpasswd (可选项) 组名 gpasswd是Linux下的管理工具，用于将一个用户添加到组或者从组中删除  -a：添加用户到组 -d：从组删除用户 -A：指定管理员 -M：指定组成员和-A的用途差不多 -r：删除密码 -R：限制用户登入组，只有组中的成员才可以用newgrp加入该组      日期管理
 date[参数选项] 参数选项  -d&amp;lt;字符串&amp;gt;：显示字符串所指的日期与时间，字符串前后必须加上双引号 -s&amp;lt;字符串&amp;gt;：根据字符串来设置日期与时间，字符串前后必须加上双引号 -u：显示GMT（CST北京时间） &amp;ndash;help：在线帮助 &amp;ndash;version：显示版本信息      显示用户</description>
    </item>
    
    <item>
      <title>java单元测试</title>
      <link>/2017/dycs/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/dycs/</guid>
      <description>单元测试   以前的测试方式
 我们都是将代码全部写完再进行测试，其实这样并不是很好，在以后的工作的时候，都是写完一部分代码，就测试一部分。这样代码中的问题可以得到及时的修复，也避免了由于代码过多，从而无法准确定位到错误的代码    Junit概述
 是一个java编程语言的单元测试工具，JUnit是一个非常重要的测试工具 JUnit是一个开放源代码的测试工具 提高注解来识别测试方法 JUnit测试可以让你编写代码更快，并能提高质量 JUnit优雅简洁，没那么复杂，花费时间较少 JUnit在一个条中显示进度，如果运行良好则是绿色，如果运行失败则是红色    JUnit使用的基本流程
  将junit的jar包导入到工程中
  编写测试方法该测试方法必须是公共的无参数无返回值的非静态方法
  在测试方法上使用@Test注解标注该方法是一个测试方法
  选中测试方法右键通过junit运行该方法
  代码演示
public class JunitDemo1 { public static void main(String[] args) { } @Test public void add(){ int a = 10; int b = 20; int sum = a+b; System.out.println(sum); } }     常用注解介绍</description>
    </item>
    
    <item>
      <title>XML</title>
      <link>/2017/xml/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/xml/</guid>
      <description>XML   XML概述
 XML的全程为(EXtensible Markup Language),是一种可扩展的标记语言 标记语言：通过标签来描述数据的一门语言(标签有时候也称其为元素) 可扩展：标签的名字是可以自己定义的 XML文件是由很多标签组成的，而标签名是可以自定义的 作用  用于进行存储数据和传输数据 作为软件的配置文件      XML标签规则
 标签由一对尖括号和合法标识符组成 &amp;mdash; &amp;lt;&amp;gt; 标签必须成对出现 特殊的标签可以不成对，但是必须有结束标记 &amp;lt;address/&amp;gt; 标签中可以定义属性，属性和标签名用空格隔开，属性值必须用引号引起来 标签需要正确的嵌套    XML语法规则
 XML文件的后缀名为：xml 文档声明必须是第一行第一列  &amp;lt;?xml version = &amp;quot;1.0&amp;quot; encoding = &amp;quot;UTF-8&amp;quot; standalone = &amp;quot;yes&amp;quot; ?&amp;gt; version：该属性必须存在 encoding：该属性不是必须的 &amp;mdash; 打开当前xml文件的时候应该是使用什么字符编码表 standalone：该属性不是必须的，描述XML文件是否依赖其他的XML文件，取值为yes/no      必须存在一个跟标签，有且只能有一个
  XML文件中可以定义注释信息
  XML文件可以存在以下特殊字符：
 &amp;amp;lt:	&amp;lt;	小于 &amp;amp;gt: &amp;gt; 大于 &amp;amp;amp: &amp;amp; 和号 &amp;amp;apos: &#39; 单引号 &amp;amp;quot: &amp;quot; 引号    XML文件中可以存在CDATA区</description>
    </item>
    
    <item>
      <title>java枚举</title>
      <link>/2017/mj/</link>
      <pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/mj/</guid>
      <description>枚举   是将变量的值一一列出来，变量的值只限于列举出来的值得范围内
  为了间接的表示一些固定的值，java就给我们提供了枚举
  枚举的格式
  定义枚举类需要用到关键字enum
public enum s{ 枚举1，枚举2，枚举3; }   练习
  定义一个枚举类，用来表示春、夏、春、冬这四个固定值
public enum Season { SPRING,SUMMER,AUTUMN,WINTER; }   枚举的特点
  所有枚举类都是Enum的子类
  我们可以通过&amp;quot;枚举类名.枚举项名称&amp;quot;去访问指定的枚举项
  每一个枚举项其实就是该枚举的一个对象
  枚举也是一个类，也可以去定义成员变量
  枚举类的第一行上必须是枚举项，最后一个枚举项后的分号是可以省略的，但是如果枚举类有其他的东西，这个分号就不能省略，建议不要省略
  枚举类可以有构造器，但是必须是private的，他默认也是private的，枚举项的用法比较特殊：枚举(&amp;quot;&amp;quot;);
  枚举类也可以有抽象方法，但是枚举项必须重写该方法
  测试类
public class EnumDemo { public static void main(String[] args) { //所有枚举类都是Enum的子类 //我们可以通过&amp;quot;枚举类名.枚举项名称&amp;quot;去访问指定的枚举项 System.out.println(Season.AUTUMN); System.</description>
    </item>
    
    <item>
      <title>java反射</title>
      <link>/2017/fs/</link>
      <pubDate>Wed, 18 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/fs/</guid>
      <description>反射   反射的概念 （java反射机制）
 是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法 对于任意一个对象，都能够调用它的任意属性和方法 这种动态获取信息以及动态调用对象方法的功能成为java语言的反射机制    利用反射可以无视修饰符获取类里面所有的属性和方法
  选获取配置文件中的信息，动态获取信息并创建对象和调用方法
  获取Class对象
  Class.forName(&amp;ldquo;全类名&amp;rdquo;);
  类名.class
  对象.getClass();
  代码演示
public class ReflectDemo1 { public static void main(String[] args) throws ClassNotFoundException { //Class类中的静态方法forname(&amp;quot;全类名&amp;quot;) 包名+类名 Class clazz = Class.forName(&amp;quot;com.heima.classloader1.Student&amp;quot;); System.out.println(clazz); //通过.class属性来获取 Class clazz1 = Student.class; System.out.println(clazz1); //同过对象调用getClass() Student student = new Student(); Class clazz2 = student.getClass(); System.out.println(clazz2); } }     反射-获取Constructor对象 获取构造方法</description>
    </item>
    
    <item>
      <title>java类加载器</title>
      <link>/2017/jiazaiqi/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/jiazaiqi/</guid>
      <description>类加载器   什么是类加载器
 类加载器：负责将.class文件(存储的物理文件)加载到内存中    类加载的过程
 类加载时机 &amp;mdash; 用到就加载，不用不加载  创建类的实例（对象） 调用类的类方法（静态方法） 访问类或者接口的类变量，或者为该类变量赋值 使用反射方式来强制创建某个类或接口对应的java.lang.Class对象 初始化某个类的子类 直接使用java.exe命令来运行某个主类   加载  通过一个类的全限定名来获取定义此类的二进制字节流 &amp;mdash; 通过包名+类名，获取这个类，准备用流进行传输 将这个字节流所代表的静态存储结构转化为运行时数据结构 &amp;mdash; 在这个类加载到内存中 在内存中生成一个代表这个类的java.lang.Class对象，任何类被使用时，系统都会为之建立一个java.lang.Class对象 &amp;mdash; 加载完毕创建一个class对象   验证  验证文件中的信息是否符合虚拟机规范，有没有安全隐患   准备  负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值。 &amp;mdash; 初始化静态变量   解析  本类中如果用到了其他类，此时就需要找到对应的类   初始化  静态变量赋值以及初始化其它资源      类加载器的分类
 启动类加载器（Bootstrap Classloader）:虚拟机内置的类加载器 平台类加载器（Platform Classloader）:负责加载JDK中一些特殊的模块 系统类加载器（System Classloader）：负责加载用户类路径上所指定的类库    类加载器双亲委派模型</description>
    </item>
    
    <item>
      <title>java网络编程</title>
      <link>/2017/wlbc/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/wlbc/</guid>
      <description>网络编程   网络编程概述
 在网络通信协议下，不同计算机上运行的程序，可以进行数据传输    网络编程三要素
 IP地址  设备在网络中的地址，是唯一的标识   端口  应用程序在设备中的唯一标识 端口号：用两个字节表示的整数，它的取值范围是0~65535，其中0~1023之间的端口号用于一些知名的网络服务或者应用，我们自己使用1024以上的端口号就可以了 一个端口号只能被一个应用程序使用   协议  数据在网络中传输的规则，常见的协议有UDP协议和TCP协议 UDP协议  用户数据报协议 UDP是面向无连接通信协议 速度快，有大小限制一次最多发送64K，数据不安全，易丢失数据     TCP协议  传输控制协议 TCP协议是面向连接的通信协议，速度慢，没有大小限制，数据安全      IP概述
 全称&amp;quot;互联网协议地址&amp;quot;，也称为IP地址，是分配给上网设备的数字标签，常见的IP分类为:ipv4和ipv6    IPv4 : 32bit(4字节) &amp;mdash; 点分十进制表示法
  IPv6 : 采用128bit，每16个字节一组，一共分为8组 &amp;mdash; 冒分十六进制表示法
  IP地址常见命令
 ipconfig:查看本机IP地址 ping IP地址:检查网络是否连通    InetAddress的使用</description>
    </item>
    
    <item>
      <title>java多线程知识总结</title>
      <link>/2017/duoxianc/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/duoxianc/</guid>
      <description>多线程   概念：是指从软件或者硬件上实现多个线程并发执行的技术
  具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。
  并行：在同一时刻，有多个指令在多个CPU上同时执行
  并发：在同一时刻，有多个指令在单个CPU上交替执行
  进程：是正在运行的软件
 独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位 动态性：进程的实质是程序的一次执行过程，进程是动态产生，动态消亡 并发性：任何进程都可以同其它进程一起并发执行    线程：是进程中的单个顺序控制流，是一条执行路径
 单线程：一个进程如果只有一条执行路径，则称为单线程程序 多线程：一个进程如果有多条执行路径，则称为多线程程序    多线程的实现方案
  继承Thread类的方式进行实现
  定义一个类MyThread继承Thread类
  在MyThread类中重写run()方法
  创建MyThread类的对象
  启动线程
  代码实现
public class MyThread extends Thread{ @Override public void run() { for (int i = 0; i &amp;lt; 100; i++) { System.out.println(&amp;quot;线程开启了&amp;quot;+i); } } } 测试类：</description>
    </item>
    
    <item>
      <title>File与IO详解</title>
      <link>/2017/stream/</link>
      <pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/stream/</guid>
      <description>File和IO详解 1. IO流是什么?  可以将数据从本地文件中读取出来 可以将数据从内存保存到本地文件  2. File类是什么?  在读写数据时告诉虚拟机要操作的(文件/文件夹)在哪 对(文件/文件夹)本身进行操作，包括创建、删除等  3. File类的介绍和构造方法  File类介绍  它是文件和目录路径名的抽象表示 文件和目录可以通过File封装成对象 File封装的对象仅仅是一个路径名。它可以是存在的，也可以是不存在的。      File类构造方法
   方法名 说明     File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例   File(String parent, String child) 从父路径名字符串和子路径名字符串创建新的 File实例   File(File parent, String child) 从父抽象路径名和子路径名字符串创建新的 File实例      代码演示
 //File(String pathname) 通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。 String path = &amp;quot;C:\\itheima\\a.</description>
    </item>
    
    <item>
      <title>Stream流详解与应用</title>
      <link>/2017/file_io/</link>
      <pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/file_io/</guid>
      <description>Stream流详解与应用 1. 什么是 Stream？ ​	Stream（流）是一个来自数据源的元素队列并支持聚合操作 ​	元素是特定类型的对象，形成一个队列。Java中的Stream并不会存储元素，而是按需计算。 ​	流的来源：可以是集合，数组，I/O channel， 产生器generator 等。 ​	聚合操作：类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。
2. Stream基础特征 ​	Pipelining: 中间操作都会返回流对象本身。这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。 ​	内部迭代： 以前对集合遍历都是通过Iterator或者For-Each的方式, 显式的在集合外部进行迭代， 这叫做	外部迭代。 Stream提供了内部迭代的方式， 通过访问者模式(Visitor)实现。
3. Stream流的三类方法 1. 获取Steam流 : 可以理解成创建一条流水线，并把数据放到流水线上准备进行操作 2. 中间方法 : 可以理解成流水线上的操作，一次操作完毕之后，还可以继续进行其他操作 3. 是流水线上的最后一个操作，一个Stream流只能有一个终结方法  4. Stream流的获取方法   单列集合
可以使用Collection接口中的默认方法stream(),生成流
default Stream&amp;lt;E&amp;gt; stream()   双列集合
间接的生成流 可以先通过keySet或者entrySet获取一个Set集合，再获取Stream流
  数组
Arrays中的静态方法stream生成流</description>
    </item>
    
    <item>
      <title>Hugo搭建个人博客到GitHub Pages</title>
      <link>/2017/hugo/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/hugo/</guid>
      <description>Windows下安装Hugo以及Git工具 到Github下载Hugo，下载对应的操作系统版本的Hugo文件。
到Git网站下载对应的操作系统版本的Git文件。
  下载完成之后解压缩，我直接解压到桌面blog文件夹下进行管理(不建议桌面)。然后添加环境变量；我的路径为:C:\Users\Administrator\Desktop\blog\hugo;也就是把此路径加入环境变量。
  添加环境变量的方法:设置-&amp;gt;系统-&amp;gt;关于-&amp;gt;高级系统设置-&amp;gt;环境变量-&amp;gt;path-&amp;gt;新建-&amp;gt;确定
  检查一下是否安装成功：
cmd键入命令: hugo version #出现相应版本号即为安装成功 # hugo v0.82.1-60618210 windows/amd64 BuildDate=2021-04-20T11:02:50Z VendorInfo=gohugoio   用Hugo创建自己的博客 在hugo同名文件下使用Git命令快速生成站点:
# 您也可以 hugo new site /path/to/site # 比如希望生成到 /path/to/site 路径 hugo new site myblog 这样就在 myblog 目录里生成了初始站点，cd myblog进入目录 ls 查看目录结构 ：
 ▸ archetypes/ ▸ content/ ▸ layouts/ ▸ static/ ▸ themes/ config.toml 其中 content 文件夹存放博文，layouts 文件夹存放博客模版，比如博客的页面结构。static 文件夹存放前端文件和以后显示在博客中的图片，themes 存放主题文件，安装的主题都会存放在该文件夹中。config.toml 是博客的配置文件。
  选择主题并下载安装 到hugo官网下载主题，下面是我比较喜欢的博客主题，比较简约:</description>
    </item>
    
  </channel>
</rss>
